package ${request.package}.bsbhv;

import java.util.List;
import java.util.Map;

import ${request.package}.bsentity.AbstractEntity;
import ${request.package}.bsentity.AbstractEntity.RequestOptionCall;
import ${request.package}.bsentity.dbmeta.${table.camelizedName}Dbm;
import ${request.package}.cbean.${table.camelizedName}CB;
import ${request.package}.exentity.${table.camelizedName};
import org.dbflute.Entity;
import org.dbflute.bhv.readable.CBCall;
import org.dbflute.bhv.readable.EntityRowHandler;
import org.dbflute.cbean.ConditionBean;
import org.dbflute.cbean.result.ListResultBean;
import org.dbflute.cbean.result.PagingResultBean;
import org.dbflute.exception.IllegalBehaviorStateException;
import org.dbflute.optional.OptionalEntity;
import org.elasticsearch.action.bulk.BulkRequestBuilder;
import org.elasticsearch.action.delete.DeleteRequestBuilder;
import org.elasticsearch.action.index.IndexRequestBuilder;

/**
 * @author FreeGen
 */
public abstract class Bs${table.camelizedName}Bhv extends AbstractBehavior<${table.camelizedName}, ${table.camelizedName}CB> {

    @Override
    public String asTableDbName() {
        return asEsIndexType();
    }

    @Override
    protected String asEsIndex() {
        return "${table.indexSettings.index}";
    }

    @Override
    public String asEsIndexType() {
        return "${table.name}";
    }

    @Override
    public String asEsSearchType() {
        return "${table.name}";
    }

    @Override
    public ${table.camelizedName}Dbm asDBMeta() {
        return ${table.camelizedName}Dbm.getInstance();
    }

    @Override
    protected <RESULT extends ${table.camelizedName}> RESULT createEntity(Map<String, Object> source, Class<? extends RESULT> entityType) {
        try {
            final RESULT result = entityType.newInstance();
#foreach ($column in $table.columnList)
#if ($column.isNormalColumn)
#set ($javaNative = ${column.type})
            result.set${column.capCamelName}(to$javaNative(source.get("${column.name}")));
#end
#end
            return result;
        } catch (InstantiationException | IllegalAccessException e) {
            final String msg = "Cannot create a new instance: " + entityType.getName();
            throw new IllegalBehaviorStateException(msg, e);
        }
    }

    public int selectCount(CBCall<${table.camelizedName}CB> cbLambda) {
        return facadeSelectCount(createCB(cbLambda));
    }

    public OptionalEntity<${table.camelizedName}> selectEntity(CBCall<${table.camelizedName}CB> cbLambda) {
        return facadeSelectEntity(createCB(cbLambda));
    }

    protected OptionalEntity<${table.camelizedName}> facadeSelectEntity(${table.camelizedName}CB cb) {
        return doSelectOptionalEntity(cb, typeOfSelectedEntity());
    }

    protected <ENTITY extends ${table.camelizedName}> OptionalEntity<ENTITY> doSelectOptionalEntity(${table.camelizedName}CB cb,
            Class<? extends ENTITY> tp) {
        return createOptionalEntity(doSelectEntity(cb, tp), cb);
    }

    @Override
    public ${table.camelizedName}CB newConditionBean() {
        return new ${table.camelizedName}CB();
    }

    @Override
    protected Entity doReadEntity(ConditionBean cb) {
        return facadeSelectEntity(downcast(cb)).orElse(null);
    }

    public ${table.camelizedName} selectEntityWithDeletedCheck(CBCall<${table.camelizedName}CB> cbLambda) {
        return facadeSelectEntityWithDeletedCheck(createCB(cbLambda));
    }

    public OptionalEntity<${table.camelizedName}> selectByPK(String id) {
        return facadeSelectByPK(id);
    }

    protected OptionalEntity<${table.camelizedName}> facadeSelectByPK(String id) {
        return doSelectOptionalByPK(id, typeOfSelectedEntity());
    }

    protected <ENTITY extends ${table.camelizedName}> ENTITY doSelectByPK(String id, Class<? extends ENTITY> tp) {
        return doSelectEntity(xprepareCBAsPK(id), tp);
    }

    protected ${table.camelizedName}CB xprepareCBAsPK(String id) {
        assertObjectNotNull("id", id);
        return newConditionBean().acceptPK(id);
    }

    protected <ENTITY extends ${table.camelizedName}> OptionalEntity<ENTITY> doSelectOptionalByPK(String id, Class<? extends ENTITY> tp) {
        return createOptionalEntity(doSelectByPK(id, tp), id);
    }

    @Override
    protected Class<? extends ${table.camelizedName}> typeOfSelectedEntity() {
        return ${table.camelizedName}.class;
    }

    @Override
    protected Class<${table.camelizedName}> typeOfHandlingEntity() {
        return ${table.camelizedName}.class;
    }

    @Override
    protected Class<${table.camelizedName}CB> typeOfHandlingConditionBean() {
        return ${table.camelizedName}CB.class;
    }

    public ListResultBean<${table.camelizedName}> selectList(CBCall<${table.camelizedName}CB> cbLambda) {
        return facadeSelectList(createCB(cbLambda));
    }

    public PagingResultBean<${table.camelizedName}> selectPage(CBCall<${table.camelizedName}CB> cbLambda) {
        // TODO same?
        return (PagingResultBean<${table.camelizedName}>) facadeSelectList(createCB(cbLambda));
    }

    public void selectCursor(CBCall<${table.camelizedName}CB> cbLambda, EntityRowHandler<${table.camelizedName}> entityLambda) {
        facadeSelectCursor(createCB(cbLambda), entityLambda);
    }

    public void selectBulk(CBCall<${table.camelizedName}CB> cbLambda, EntityRowHandler<List<${table.camelizedName}>> entityLambda) {
        delegateSelectBulk(createCB(cbLambda), entityLambda,typeOfSelectedEntity());
    }

    public void insert(${table.camelizedName} entity) {
        doInsert(entity, null);
    }

    public void insert(${table.camelizedName} entity, RequestOptionCall<IndexRequestBuilder> opLambda) {
        if (entity instanceof AbstractEntity) {
            entity.asDocMeta().indexOption(opLambda);
        }
        doInsert(entity, null);
    }

    public void update(${table.camelizedName} entity) {
        doUpdate(entity, null);
    }

    public void update(${table.camelizedName} entity, RequestOptionCall<IndexRequestBuilder> opLambda) {
        if (entity instanceof AbstractEntity) {
            entity.asDocMeta().indexOption(opLambda);
        }
        doUpdate(entity, null);
    }

    public void insertOrUpdate(${table.camelizedName} entity) {
        doInsertOrUpdate(entity, null, null);
    }

    public void insertOrUpdate(${table.camelizedName} entity, RequestOptionCall<IndexRequestBuilder> opLambda) {
        if (entity instanceof AbstractEntity) {
            entity.asDocMeta().indexOption(opLambda);
        }
        doInsertOrUpdate(entity, null, null);
    }

    public void delete(${table.camelizedName} entity) {
        doDelete(entity, null);
    }

    public void delete(${table.camelizedName} entity, RequestOptionCall<DeleteRequestBuilder> opLambda) {
        if (entity instanceof AbstractEntity) {
            entity.asDocMeta().deleteOption(opLambda);
        }
        doDelete(entity, null);
    }

    public int queryDelete(CBCall<${table.camelizedName}CB> cbLambda) {
        return doQueryDelete(createCB(cbLambda), null);
    }

    public int[] batchInsert(List<${table.camelizedName}> list) {
        return batchInsert(list, null);
    }

    public int[] batchInsert(List<${table.camelizedName}> list, RequestOptionCall<BulkRequestBuilder> call) {
        return doBatchInsert(new BulkList<>(list, call), null);
    }

    public int[] batchUpdate(List<${table.camelizedName}> list) {
        return batchUpdate(list, null);
    }

    public int[] batchUpdate(List<${table.camelizedName}> list, RequestOptionCall<BulkRequestBuilder> call) {
        return doBatchUpdate(new BulkList<>(list, call), null);
    }

    public int[] batchDelete(List<${table.camelizedName}> list) {
        return batchDelete(list, null);
    }

    public int[] batchDelete(List<${table.camelizedName}> list, RequestOptionCall<BulkRequestBuilder> call) {
        return doBatchDelete(new BulkList<>(list, call), null);
    }

    // TODO create, modify, remove
}

